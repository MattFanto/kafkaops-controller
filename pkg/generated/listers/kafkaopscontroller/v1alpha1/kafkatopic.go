/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/mattfanto/kafkaops-controller/pkg/apis/kafkaopscontroller/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KafkaTopicLister helps list KafkaTopics.
// All objects returned here must be treated as read-only.
type KafkaTopicLister interface {
	// List lists all KafkaTopics in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.KafkaTopic, err error)
	// KafkaTopics returns an object that can list and get KafkaTopics.
	KafkaTopics(namespace string) KafkaTopicNamespaceLister
	KafkaTopicListerExpansion
}

// kafkaTopicLister implements the KafkaTopicLister interface.
type kafkaTopicLister struct {
	indexer cache.Indexer
}

// NewKafkaTopicLister returns a new KafkaTopicLister.
func NewKafkaTopicLister(indexer cache.Indexer) KafkaTopicLister {
	return &kafkaTopicLister{indexer: indexer}
}

// List lists all KafkaTopics in the indexer.
func (s *kafkaTopicLister) List(selector labels.Selector) (ret []*v1alpha1.KafkaTopic, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KafkaTopic))
	})
	return ret, err
}

// KafkaTopics returns an object that can list and get KafkaTopics.
func (s *kafkaTopicLister) KafkaTopics(namespace string) KafkaTopicNamespaceLister {
	return kafkaTopicNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KafkaTopicNamespaceLister helps list and get KafkaTopics.
// All objects returned here must be treated as read-only.
type KafkaTopicNamespaceLister interface {
	// List lists all KafkaTopics in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.KafkaTopic, err error)
	// Get retrieves the KafkaTopic from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.KafkaTopic, error)
	KafkaTopicNamespaceListerExpansion
}

// kafkaTopicNamespaceLister implements the KafkaTopicNamespaceLister
// interface.
type kafkaTopicNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all KafkaTopics in the indexer for a given namespace.
func (s kafkaTopicNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.KafkaTopic, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KafkaTopic))
	})
	return ret, err
}

// Get retrieves the KafkaTopic from the indexer for a given namespace and name.
func (s kafkaTopicNamespaceLister) Get(name string) (*v1alpha1.KafkaTopic, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("kafkatopic"), name)
	}
	return obj.(*v1alpha1.KafkaTopic), nil
}
